#!/usr/bin/env node
const {resolve} = require('path')
const execa = require('execa')
const AWS = require('aws-sdk')
const yargonaut = require('yargs')
const {readFileSync, writeFileSync} = require('fs')
const gulp = require('gulp')
const zip = require('gulp-zip')
const merge = require('gulp-merge')

const pkg = require('../package.json')

const {promisify} = require('../util/promisify')

const DEPLOY_DIR = resolve(__dirname, '../packages/deployment')

const s3 = new AWS.S3({region: 'us-east-1'})

async function terraform () {
  await execa('terraform', process.argv.slice(3), {cwd: DEPLOY_DIR, stdio: 'inherit'}).stdout
}

const BACKEND_CONFIG_PATH = (argv) => `apps/${pkg.name}/stage/${argv.stage || 'dev'}`

async function downloadSecrets (argv) {
  const [backendTf, terraformVars] = await Promise.all([
    s3.getObject({
      Bucket: pkg.config['secrets-bucket'],
      Key: `${BACKEND_CONFIG_PATH(argv)}/backend.tf`
    }).promise(),
    s3.getObject({
      Bucket: pkg.config['secrets-bucket'],
      Key: `${BACKEND_CONFIG_PATH(argv)}/terraform.tfvars`
    }).promise()
  ])
  writeFileSync(resolve(DEPLOY_DIR, 'backend.tf'), backendTf.Body)
  writeFileSync(resolve(DEPLOY_DIR, 'terraform.tfvars'), terraformVars.Body)
}

async function uploadSecrets (argv) {
  const backendTf = readFileSync(resolve(DEPLOY_DIR, 'backend.tf'))
  const terraformVars = readFileSync(resolve(DEPLOY_DIR, 'terraform.tfvars'))
  await Promise.all([
    s3.putObject({
      Bucket: pkg.config['secrets-bucket'],
      Key: `${BACKEND_CONFIG_PATH(argv)}/backend.tf`,
      Body: backendTf
    }).promise(),
    s3.putObject({
      Bucket: pkg.config['secrets-bucket'],
      Key: `${BACKEND_CONFIG_PATH(argv)}/terraform.tfvars`,
      Body: terraformVars
    }).promise()
  ])
}

async function zipLambda (argv) {
  if (!argv.skipCompile) {
    console.log('Building...')
    await execa('npm', ['run', 'build'], {
      cwd: resolve(process.cwd(), 'packages/server'),
      stdio: 'inherit'
    })
    console.log('Done.')
  }
  console.log('Zipping...')

  await Promise.all(['server', 'auth'].map(
    (bundleName) => promisify(
      merge(
        gulp.src(resolve(process.cwd(), 'packages/server/package.json'), {cwd: process.cwd()}),
        gulp.src(resolve(process.cwd(), `packages/server/dist/${bundleName}/**`), {cwd: process.cwd()})
      )
        .pipe(zip(`${bundleName}.zip`))
        .pipe(gulp.dest(resolve(process.cwd(), 'packages/deployment/bundles/'))))
  ))

  console.log('Done.')
}

const identity = (yargs) => yargs

yargonaut // eslint-disable-line no-unused-expressions
  .command('terraform', 'run terraform', identity, terraform)
  .command('secrets:download', 'download secrets file', identity, downloadSecrets)
  .command('secrets:upload', 'upload secrets file', identity, uploadSecrets)
  .command(
    'lambda:zip',
    'bundle lambdas',
    (yargs) => yargs
      .option('skip-compile', {
        type: 'boolean',
        desc: 'If true, skip TypeScript compilation',
        default: false
      }),
    zipLambda
  )
  .help()
  .argv
