#!/usr/bin/env node
const {resolve} = require('path')
const {spawn} = require('child_process')
const AWS = require('aws-sdk')
const yargonaut = require('yargs')
const {readFileSync, writeFileSync} = require('fs')
const gulp = require('gulp')
const zip = require('gulp-zip')
const merge = require('gulp-merge')

const pkg = require('../package.json')

const {promisify} = require('../util/monkeypatch')

const DEPLOY_DIR = resolve(__dirname, '../packages/deployment')

const s3 = new AWS.S3({region: 'us-east-1'})

async function terraform () {
  await spawn('terraform', process.argv.slice(3), {cwd: DEPLOY_DIR, stdio: 'inherit'}).stdout
}

const BACKEND_CONFIG_PATH = (argv) => `apps/${pkg.name}/stage/${argv.stage || 'dev'}`

async function downloadSecrets (argv) {
  const response = await s3.getObject({
    Bucket: pkg.config['secrets-bucket'],
    Key: `${BACKEND_CONFIG_PATH(argv)}/backend.tf`
  }).promise()
  writeFileSync(resolve(DEPLOY_DIR, 'backend.tf'), response.Body)
}

async function uploadSecrets (argv) {
  const backendTf = readFileSync(resolve(DEPLOY_DIR, 'backend.tf'))
  await s3.putObject({
    Bucket: pkg.config['secrets-bucket'],
    Key: `${BACKEND_CONFIG_PATH(argv)}/backend.tf`,
    Body: backendTf
  }).promise()
}

async function zipLambda () {
  await spawn('npm', ['run', 'build'], {
    cwd: resolve(process.cwd(), 'packages/server'),
    stdio: 'inherit'
  }).stdout
  await promisify(
    merge(
      gulp.src(resolve(process.cwd(), 'packages/server/package.json'), {cwd: process.cwd()}),
      gulp.src(resolve(process.cwd(), 'packages/server/dist/**'), {cwd: process.cwd()})
    )
      .pipe(zip('server.zip'))
      .pipe(gulp.dest(resolve(process.cwd(), 'packages/deployment/bundles/'))))
}

const identity = (yargs) => yargs

yargonaut // eslint-disable-line no-unused-expressions
  .command('terraform', 'run terraform', identity, terraform)
  .command('secrets:download', 'download secrets file', identity, downloadSecrets)
  .command('secrets:upload', 'upload secrets file', identity, uploadSecrets)
  .command('lambda:zip', 'bundle lambdas', identity, zipLambda)
  .help()
  .argv
